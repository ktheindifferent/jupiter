# Test Database Configuration
# ============================
# This file contains example environment variables for running database tests.
# Copy this file to .env.test and update with your actual values if you have a test database.
#
# NOTE: Tests will work without these variables by using default local values,
# but setting them allows testing against a real database instance.

# Homebrew Database Configuration
# --------------------------------
# Used for testing the homebrew provider database connections
HOMEBREW_PG_DBNAME=test_homebrew_db
HOMEBREW_PG_USER=postgres
HOMEBREW_PG_PASS=password
HOMEBREW_PG_ADDRESS=localhost

# Combo Database Configuration
# -----------------------------
# Used for testing the combo provider database connections
COMBO_PG_DBNAME=test_combo_db
COMBO_PG_USER=postgres
COMBO_PG_PASS=password
COMBO_PG_ADDRESS=localhost

# Test Configuration Options
# --------------------------
# These are optional settings that can be used to customize test behavior

# Skip database tests if connection fails (default: tests use mock data)
# TEST_SKIP_ON_DB_ERROR=true

# Force tests to use real database (fail if not available)
# TEST_REQUIRE_REAL_DB=false

# Database connection timeout for tests (in seconds)
# TEST_DB_TIMEOUT=5

# Running Tests
# =============
# 
# 1. Without any configuration (uses defaults):
#    cargo test
#
# 2. With environment variables from this file:
#    cp .env.test.example .env.test
#    # Edit .env.test with your values
#    source .env.test && cargo test
#
# 3. Using Docker for test database:
#    docker-compose -f docker-compose.test.yml up -d
#    cargo test
#    docker-compose -f docker-compose.test.yml down
#
# 4. Running only non-database tests:
#    cargo test --lib -- --skip db_pool_tests
#
# Docker Test Database Setup
# ==========================
# If you don't have a PostgreSQL instance, you can use Docker:
#
# docker run --name test-postgres \
#   -e POSTGRES_PASSWORD=password \
#   -e POSTGRES_USER=postgres \
#   -e POSTGRES_DB=test_homebrew_db \
#   -p 5432:5432 \
#   -d postgres:15-alpine
#
# Then create the additional database:
# docker exec test-postgres psql -U postgres -c "CREATE DATABASE test_combo_db;"
#
# CI/CD Configuration
# ===================
# For CI/CD pipelines, these variables should be set as secrets:
# - In GitHub Actions: Settings -> Secrets -> Actions
# - In GitLab CI: Settings -> CI/CD -> Variables
# - In Jenkins: Credentials -> System -> Global credentials
#
# The test suite will automatically detect CI environment and adjust accordingly.